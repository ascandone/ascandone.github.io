{"version":3,"sources":["webpack:///./src/pages/blog/better-nextjs-imports.mdx"],"names":["metadata","title","tags","description","date","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"oRAMaA,EAAW,CACtBC,MAAO,yBACPC,KAAM,CAAC,QAAS,QAChBC,YAAa,qEACbC,KAAM,kBAEKC,EAAe,GACtBC,EAAc,CAClBN,WACAK,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,kFAAiE,+BAAGC,WAAW,KAAQ,CACnF,KAAQ,+CADqD,4BAAjE,OAE6C,0BAAYA,WAAW,KAAvB,iBAF7C,QAE+G,0BAAYA,WAAW,KAAvB,iBAF/G,uEAEgP,0BAAYA,WAAW,KAAvB,WAFhP,qDAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,8IAWL,sDAAqC,0BAAYA,WAAW,KAAvB,SAArC,mBACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,6KAaL,uBACA,gFAA+D,0BAAYA,WAAW,KAAvB,iBAA/D,0EAAmM,+BAAGA,WAAW,KAAQ,CACrN,KAAQ,mFADuL,qBAAnM,oCAGA,uBACA,2BACF,uEACI,wEAAuD,0BAAYA,WAAW,KAAvB,OAAvD,wEAA+K,+BAAGA,WAAW,KAAQ,CACjM,KAAQ,4DACP,0BAAYA,WAAW,KAAvB,iCAFL,4BAGA,sFACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,yDAIL,4FACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8CAIL,mEAAkD,0BAAYA,WAAW,KAAvB,iBAAlD,KACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,iDAIL,sEAAqD,0BAAYA,WAAW,KAAvB,iBAArD,qBAAoI,0BAAYA,WAAW,KAAvB,mBAApI,YACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,gNAgBL,iCAAgB,0BAAYA,WAAW,KAAvB,iBAAhB,QAAkF,0BAAYA,WAAW,KAAvB,iBAAlF,4CAAwL,0BAAYA,WAAW,KAAvB,SAAxL,cACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,6HAWL,0FACA,oGAAmF,0BAAYA,WAAW,KAAvB,iBAAnF,KACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,wEAML,2FAMNJ,EAAWK,gBAAiB","file":"component---src-pages-blog-better-nextjs-imports-mdx-17c3011dd7b95ce4f631.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/alessandro/Documents/Dev/websites/projects/ascandone.github.io/src/components/blog-layout.tsx\";\nexport const metadata = {\n  title: 'Better Next.js Imports',\n  tags: ['react', 'test'],\n  description: 'Improved import statements with absolute paths using babel plugins',\n  date: 'March 15, 2020'\n};\nexport const _frontmatter = {};\nconst layoutProps = {\n  metadata,\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <p>{`Nine days after first writing this post, the Next.js team `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/zeit/next.js/pull/11293\"\n      }}>{`landed support for paths`}</a>{` in `}<inlineCode parentName=\"p\">{`tsconfig.json`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`jsconfig.json`}</inlineCode>{` by default! In Next.js 9.4 and onwards, you only need to specify a `}<inlineCode parentName=\"p\">{`baseURL`}</inlineCode>{` in your config file to support absolute imports:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`// tsconfig.json or jsconfig.json\n{\n  \"compilerOptions\": {\n    \"baseURL\": \".\"\n  }\n}\n\n// import Button from 'components/button'\n`}</code></pre>\n    <p>{`To use a custom prefix, add a `}<inlineCode parentName=\"p\">{`paths`}</inlineCode>{` configuration:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"compilerOptions\": {\n    \"baseURL\": \".\",\n    \"paths\": {\n      \"@components/*\": [\"components/*\"]\n    }\n  }\n}\n\n// import Button from '@components/button'\n`}</code></pre>\n    <hr></hr>\n    <p>{`Editors like VSCode automatically support the config in `}<inlineCode parentName=\"p\">{`jsconfig.json`}</inlineCode>{`, so Command+Click to jump to the source of a file will work as usual. `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/tleunen/babel-plugin-module-resolver#editors-autocompletion\"\n      }}>{`Atom and IntelliJ`}</a>{` also have support for rewrites.`}</p>\n    <hr></hr>\n    <details>\n  <summary>The original post, using a babel plugin.</summary>\n      <p>{`Relative import statements are a pain. To avoid `}<inlineCode parentName=\"p\">{`../`}</inlineCode>{` chains, improve code portability, and type less, I've started using `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/tleunen/babel-plugin-module-resolver\"\n        }}><inlineCode parentName=\"a\">{`babel-plugin-module-resolver`}</inlineCode></a>{` in my Next.js projects.`}</p>\n      <p>{`The goal is to transform verbose import statements like this:`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-js\"\n        }}>{`import Button from '../../../../components/button'\n`}</code></pre>\n      <p>{`into absolute import statements that work anywhere in your project:`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-js\"\n        }}>{`import Button from '@components/button'\n`}</code></pre>\n      <p>{`Let's do it. Install the babel plugin as a `}<inlineCode parentName=\"p\">{`devDependency`}</inlineCode>{`:`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-bash\"\n        }}>{`$ yarn add babel-plugin-module-resolver -D\n`}</code></pre>\n      <p>{`In the root of your Next.js project, create a `}<inlineCode parentName=\"p\">{`.babelrc.json`}</inlineCode>{` file and add the `}<inlineCode parentName=\"p\">{`module-resolver`}</inlineCode>{` plugin:`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-js\"\n        }}>{`module.exports = {\n  presets: ['next/babel'],\n  plugins: [\n    [\n      'module-resolver',\n      {\n        alias: {\n          '@components': './components',\n        },\n      },\n    ],\n  ],\n}\n`}</code></pre>\n      <p>{`Create a `}<inlineCode parentName=\"p\">{`jsconfig.json`}</inlineCode>{` (or `}<inlineCode parentName=\"p\">{`tsconfig.json`}</inlineCode>{` if you're using TypeScript) and add the `}<inlineCode parentName=\"p\">{`paths`}</inlineCode>{` property:`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-json\"\n        }}>{`{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@components/*\": [\"components/*\"]\n    }\n  }\n}\n`}</code></pre>\n      <p>{`Note that the syntax is slightly different than the babel config.`}</p>\n      <p>{`If you're using a mixed JS/TS codebase, you should include JS files in your `}<inlineCode parentName=\"p\">{`tsconfig.json`}</inlineCode>{`:`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-json\"\n        }}>{`{\n  \"include\": [\"**/*.ts\", \"**/*.tsx\", \"**/*.js\", \"**/*.jsx\"]\n}\n`}</code></pre>\n      <p>{`Now you can update your import statements to use the new syntax!`}</p>\n    </details>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}
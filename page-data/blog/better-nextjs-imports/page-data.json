{"componentChunkName":"component---src-components-blog-layout-tsx","path":"/blog/better-nextjs-imports","result":{"pageContext":{"frontmatter":{"date":"March 15, 2020","tags":null,"title":"Better Next.js Imports"},"html":"<p>Nine days after first writing this post, the Next.js team <a href=\"https://github.com/zeit/next.js/pull/11293\">landed support for paths</a> in <code class=\"language-text\">tsconfig.json</code> and <code class=\"language-text\">jsconfig.json</code> by default! In Next.js 9.4 and onwards, you only need to specify a <code class=\"language-text\">baseURL</code> in your config file to support absolute imports:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// tsconfig.json or jsconfig.json</span>\n<span class=\"token punctuation\">{</span>\n  compilerOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"baseURL\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\".\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// import Button from 'components/button'</span></code></pre></div>\n<p>To use a custom prefix, add a <code class=\"language-text\">paths</code> configuration:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  compilerOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"baseURL\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"paths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"@components/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"components/*\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// import Button from '@components/button'</span></code></pre></div>\n<hr>\n<p>Editors like VSCode automatically support the config in <code class=\"language-text\">jsconfig.json</code>, so Command+Click to jump to the source of a file will work as usual. <a href=\"https://github.com/tleunen/babel-plugin-module-resolver#editors-autocompletion\">Atom and IntelliJ</a> also have support for rewrites.</p>\n<hr>\n<details>\n  <summary>The original post, using a babel plugin.</summary>\n<p>Relative import statements are a pain. To avoid <code class=\"language-text\">../</code> chains, improve code portability, and type less, I've started using <a href=\"https://github.com/tleunen/babel-plugin-module-resolver\"><code class=\"language-text\">babel-plugin-module-resolver</code></a> in my Next.js projects.</p>\n<p>The goal is to transform verbose import statements like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Button <span class=\"token keyword\">from</span> <span class=\"token string\">'../../../../components/button'</span></code></pre></div>\n<p>into absolute import statements that work anywhere in your project:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Button <span class=\"token keyword\">from</span> <span class=\"token string\">'@components/button'</span></code></pre></div>\n<p>Let's do it. Install the babel plugin as a <code class=\"language-text\">devDependency</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">yarn</span> <span class=\"token function\">add</span> babel-plugin-module-resolver -D</code></pre></div>\n<p>In the root of your Next.js project, create a <code class=\"language-text\">.babelrc.json</code> file and add the <code class=\"language-text\">module-resolver</code> plugin:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  presets<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'next/babel'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">'module-resolver'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        alias<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token string\">'@components'</span><span class=\"token operator\">:</span> <span class=\"token string\">'./components'</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Create a <code class=\"language-text\">jsconfig.json</code> (or <code class=\"language-text\">tsconfig.json</code> if you're using TypeScript) and add the <code class=\"language-text\">paths</code> property:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"paths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"@components/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"components/*\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note that the syntax is slightly different than the babel config.</p>\n<p>If you're using a mixed JS/TS codebase, you should include JS files in your <code class=\"language-text\">tsconfig.json</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"**/*.ts\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"**/*.tsx\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"**/*.js\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"**/*.jsx\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now you can update your import statements to use the new syntax!</p>\n</details>"}},"staticQueryHashes":[]}
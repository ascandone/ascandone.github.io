{"componentChunkName":"component---src-components-blog-layout-tsx","path":"/blog/svg-cache-with-use","result":{"pageContext":{"frontmatter":{"date":"June 25, 2020","tags":null,"title":"SVG Caching with <use>"},"html":"<p>I had an idea for caching SVG paths. Not the usual kind of async request caching of remote SVGs, but local re-use of DOM elements that have already rendered.</p>\n<p>SVG's <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/use\"><code class=\"language-text\">&lt;use&gt;</code></a> element allows re-use of an existing DOM element, without manually duplicating the node. It works like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- Add an id to the element --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>circle<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>5<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">r</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>5<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">fill</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>black<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">&lt;!-- Pass the id as href to &lt;use> --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>use</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#circle<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">&lt;!-- The same SVG renders twice --></span></code></pre></div>\n<h2>Setup</h2>\n<p>When using an icon set like <a href=\"https://feathericons.com/\">Feather</a> in React, I prefer to use a higher-order component (HOC) and a generic <code class=\"language-text\">Icon</code> component to render each icon with consistent properties. We'll use this HOC to demonstrate SVG caching:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> memo <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">withIcon</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">icon<span class=\"token punctuation\">,</span> opts</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Icon</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> size <span class=\"token operator\">=</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> color <span class=\"token operator\">=</span> <span class=\"token string\">'currentColor'</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span>\n        <span class=\"token attr-name\">viewBox</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0 0 24 24<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">width</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>size<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">height</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>size<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">stroke</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>currentColor<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n          color\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">dangerouslySetInnerHTML</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n          __html<span class=\"token operator\">:</span> icon\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">memo</span><span class=\"token punctuation\">(</span>Icon<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> withIcon</code></pre></div>\n<p>Each icon is simply the SVG contents wrapped with the HOC:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> ArrowLeft <span class=\"token operator\">=</span> <span class=\"token function\">withIcon</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;path d=\"M21 12H3m0 0l6.146-6M3 12l6.146 6\" />'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Caching</h2>\n<p>We'll use React context to add an icon cache. First, create a new context and the appropriate hook to access it:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> IconCache <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useIconCache</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>IconCache<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Setup the provider at the application root. The cache will be a plain, empty object where each key is the icon string and each value is the cached id.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsxraw\"><pre class=\"language-jsxraw\"><code class=\"language-jsxraw\">const App = () =&gt; (\n  &lt;IconCache.Provider value={{}}&gt;{/* ... */}&lt;/IconCache.Provider&gt;\n)</code></pre></div>\n<p>Inside of <code class=\"language-text\">Icon</code>, read the cache from context and check if this icon has a cached id. If not, generate the new id and add it to the cache:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> cache <span class=\"token operator\">=</span> <span class=\"token function\">useIconCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> cachedId <span class=\"token operator\">=</span> cache<span class=\"token punctuation\">[</span>icon<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cachedId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  cachedId <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">icon-</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>icon<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n  cache<span class=\"token punctuation\">[</span>icon<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cachedId\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Generate a stable id by hashing the icon using the <a href=\"https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function\">fnv1a</a> <a href=\"#footnote\"><sup>1</sup></a> algorithm (commonly used in CSS-in-JS libraries) and then converting it to hexadecimal for a smaller string:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> hash <span class=\"token keyword\">from</span> <span class=\"token string\">'fnv1a'</span></code></pre></div>\n<p>If we have a cached id, we can render the <code class=\"language-text\">&lt;use&gt;</code> tag instead of inserting the entire icon again. If this icon has not rendered before, wrap it in a group tag and attach the unique id.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsxhighlight=11-13\"><pre class=\"language-jsxhighlight=11-13\"><code class=\"language-jsxhighlight=11-13\">return (\n  &lt;svg\n    viewBox=&quot;0 0 24 24&quot;\n    width={size}\n    height={size}\n    stroke=&quot;currentColor&quot;\n    style={{\n      color\n    }}\n    dangerouslySetInnerHTML={{\n      __html: cachedId\n        ? `&lt;use href=&quot;#${cachedId}&quot; /&gt;`\n        : `&lt;g id=&quot;${id}&quot;&gt;${icon}&lt;/g&gt;`\n    }}\n  /&gt;\n)</code></pre></div>\n<h2>Conclusion</h2>\n<p>Here's our new <code class=\"language-text\">withIcon</code> HOC with caching:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsxhighlight=2,4-5,10,12,13,15-18,30-32\"><pre class=\"language-jsxhighlight=2,4-5,10,12,13,15-18,30-32\"><code class=\"language-jsxhighlight=2,4-5,10,12,13,15-18,30-32\">import { memo } from &#39;react&#39;\nimport hash from &#39;fnv1a&#39;\n\nexport const IconCache = React.createContext({})\nexport const useIconCache = () =&gt; React.useContext(IconCache)\n\nconst withIcon = icon =&gt; {\n  const Icon = props =&gt; {\n    const { size = 24, color = &#39;currentColor&#39; } = props\n    const cache = useIconCache()\n\n    const cachedId = cache[icon]\n    let id\n\n    if (!cachedId) {\n      id = &#39;icon-&#39; + hash(icon).toString(16)\n      cache[icon] = id\n    }\n\n    return (\n      &lt;svg\n        viewBox=&quot;0 0 24 24&quot;\n        width={size}\n        height={size}\n        stroke=&quot;currentColor&quot;\n        style={{\n          color\n        }}\n        dangerouslySetInnerHTML={{\n          __html: cachedId\n            ? `&lt;use href=&quot;#${cachedId}&quot; /&gt;`\n            : `&lt;g id=&quot;${id}&quot;&gt;${icon}&lt;/g&gt;`\n        }}\n      /&gt;\n    )\n  }\n\n  return memo(Icon)\n}\n\nexport default withIcon</code></pre></div>\n<p>Rendering the same icon multiple times will reuse existing DOM elements, decreasing the size of your HTML:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsxraw\"><pre class=\"language-jsxraw\"><code class=\"language-jsxraw\">/* React */\n\n&lt;IconCache.Provider value={{}}&gt;\n  &lt;ArrowLeft /&gt;\n  &lt;ArrowLeft /&gt;\n  &lt;ArrowLeft /&gt;\n&lt;/IconCache.Provider&gt;\n\n/* HTML Output:\n  &lt;svg&gt;\n    &lt;g id=&quot;icon-dacb5a47&quot;&gt;&lt;path d=&quot;M21 12H3m0 0l6.146-6M3 12l6.146 6&quot; /&gt;&lt;/g&gt;\n  &lt;/svg&gt;\n\n  &lt;svg&gt;\n    &lt;use href=&quot;#icon-dacb5a47&quot; /&gt;\n  &lt;/svg&gt;\n\n  &lt;svg&gt;\n    &lt;use href=&quot;#icon-dacb5a47&quot; /&gt;\n  &lt;/svg&gt;\n*/</code></pre></div>\n<p>In this example, the cached version is about 40% fewer characters!</p>\n<p>You can still customize each icon, because the props apply to the outer svg element and don't involve the inner elements at all:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ArrowLeft</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ArrowLeft</span></span> <span class=\"token attr-name\">size</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">30</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>blue<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ArrowLeft</span></span> <span class=\"token attr-name\">size</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">50</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>red<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<hr>\n<p>Here's a <a href=\"https://svgcache.vercel.app\">live demo</a> and the <a href=\"https://github.com/pacocoursey/svgcache\">demo source code</a>.</p>\n<div id=\"footnote\"></div>\n<ol>\n<li>You don't have to use fnv1a, any stable id generation technique will work. Just make sure it's consistent between server and client to avoid hydration mismatch.</li>\n</ol>"}},"staticQueryHashes":[]}
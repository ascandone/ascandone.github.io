(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{mdB2:function(e,n,t){"use strict";t.r(n),t.d(n,"metadata",(function(){return l})),t.d(n,"_frontmatter",(function(){return p})),t.d(n,"default",(function(){return r}));var a=t("zLVn"),o=(t("q1tI"),t("7ljp")),s=t("i4IE"),l={title:"Better Next.js Imports",tags:["react","test"],description:"Improved import statements with absolute paths using babel plugins",date:"March 15, 2020"},p={},b={metadata:l,_frontmatter:p},i=s.a;function r(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(o.b)(i,Object.assign({},b,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Nine days after first writing this post, the Next.js team ",Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/zeit/next.js/pull/11293"}),"landed support for paths")," in ",Object(o.b)("inlineCode",{parentName:"p"},"tsconfig.json")," and ",Object(o.b)("inlineCode",{parentName:"p"},"jsconfig.json")," by default! In Next.js 9.4 and onwards, you only need to specify a ",Object(o.b)("inlineCode",{parentName:"p"},"baseURL")," in your config file to support absolute imports:"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-json"}),'// tsconfig.json or jsconfig.json\n{\n  "compilerOptions": {\n    "baseURL": "."\n  }\n}\n\n// import Button from \'components/button\'\n')),Object(o.b)("p",null,"To use a custom prefix, add a ",Object(o.b)("inlineCode",{parentName:"p"},"paths")," configuration:"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-json"}),'{\n  "compilerOptions": {\n    "baseURL": ".",\n    "paths": {\n      "@components/*": ["components/*"]\n    }\n  }\n}\n\n// import Button from \'@components/button\'\n')),Object(o.b)("hr",null),Object(o.b)("p",null,"Editors like VSCode automatically support the config in ",Object(o.b)("inlineCode",{parentName:"p"},"jsconfig.json"),", so Command+Click to jump to the source of a file will work as usual. ",Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/tleunen/babel-plugin-module-resolver#editors-autocompletion"}),"Atom and IntelliJ")," also have support for rewrites."),Object(o.b)("hr",null),Object(o.b)("details",null,Object(o.b)("summary",null,"The original post, using a babel plugin."),Object(o.b)("p",null,"Relative import statements are a pain. To avoid ",Object(o.b)("inlineCode",{parentName:"p"},"../")," chains, improve code portability, and type less, I've started using ",Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/tleunen/babel-plugin-module-resolver"}),Object(o.b)("inlineCode",{parentName:"a"},"babel-plugin-module-resolver"))," in my Next.js projects."),Object(o.b)("p",null,"The goal is to transform verbose import statements like this:"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"import Button from '../../../../components/button'\n")),Object(o.b)("p",null,"into absolute import statements that work anywhere in your project:"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"import Button from '@components/button'\n")),Object(o.b)("p",null,"Let's do it. Install the babel plugin as a ",Object(o.b)("inlineCode",{parentName:"p"},"devDependency"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-bash"}),"$ yarn add babel-plugin-module-resolver -D\n")),Object(o.b)("p",null,"In the root of your Next.js project, create a ",Object(o.b)("inlineCode",{parentName:"p"},".babelrc.json")," file and add the ",Object(o.b)("inlineCode",{parentName:"p"},"module-resolver")," plugin:"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"module.exports = {\n  presets: ['next/babel'],\n  plugins: [\n    [\n      'module-resolver',\n      {\n        alias: {\n          '@components': './components',\n        },\n      },\n    ],\n  ],\n}\n")),Object(o.b)("p",null,"Create a ",Object(o.b)("inlineCode",{parentName:"p"},"jsconfig.json")," (or ",Object(o.b)("inlineCode",{parentName:"p"},"tsconfig.json")," if you're using TypeScript) and add the ",Object(o.b)("inlineCode",{parentName:"p"},"paths")," property:"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-json"}),'{\n  "compilerOptions": {\n    "baseUrl": ".",\n    "paths": {\n      "@components/*": ["components/*"]\n    }\n  }\n}\n')),Object(o.b)("p",null,"Note that the syntax is slightly different than the babel config."),Object(o.b)("p",null,"If you're using a mixed JS/TS codebase, you should include JS files in your ",Object(o.b)("inlineCode",{parentName:"p"},"tsconfig.json"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-json"}),'{\n  "include": ["**/*.ts", "**/*.tsx", "**/*.js", "**/*.jsx"]\n}\n')),Object(o.b)("p",null,"Now you can update your import statements to use the new syntax!")))}r.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-blog-better-nextjs-imports-mdx-17c3011dd7b95ce4f631.js.map
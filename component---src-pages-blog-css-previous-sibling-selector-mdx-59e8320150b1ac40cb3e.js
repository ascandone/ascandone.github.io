(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{"2h3v":function(e,t,n){"use strict";n.r(t),n.d(t,"metadata",(function(){return c})),n.d(t,"_frontmatter",(function(){return o})),n.d(t,"default",(function(){return b}));var a=n("zLVn"),s=(n("q1tI"),n("7ljp")),i=n("i4IE"),c={title:"CSS trick to style preceding elements using flexbox and order.",description:"CSS trick to style preceding elements using flexbox and order.",date:"August 19, 2019",tags:["css"]},o={},r={metadata:c,_frontmatter:o},p=i.a;function b(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(s.b)(p,Object.assign({},r,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)("p",null,"There is no previous sibling selector in CSS. Instead, we can achieve the same behavior by using flexbox and the ",Object(s.b)("inlineCode",{parentName:"p"},"order")," property."),Object(s.b)("p",null,"Let's say you're adding a prefix to an input, and would like to style the prefix when the input is focused. If you read from left to right and top to bottom (English), you likely structure your DOM like that too:"),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-html"}),'<div class="container">\n  <div class="prefix">https://</div>\n  <input type="text" />\n</div>\n')),Object(s.b)("div",{className:"example"},Object(s.b)("div",{className:"container"},Object(s.b)("div",{className:"prefix"},"https://"),Object(s.b)("input",{type:"text"}))),Object(s.b)("p",null,"In this markup, there's no way to target the ",Object(s.b)("inlineCode",{parentName:"p"},".prefix")," class using ",Object(s.b)("inlineCode",{parentName:"p"},"input:focus"),", because we have no preceding selector. Instead, we can rewrite the DOM structure so that prefix appears ",Object(s.b)("em",{parentName:"p"},"after")," the input:"),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-html"}),'<div class="container">\n  <input type="text" />\n  <div class="prefix">https://</div>\n</div>\n')),Object(s.b)("p",null,"And use flexbox to change the order of appearance:"),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-css"}),".container {\n  display: flex;\n}\n\n.container input {\n  order: 1;\n}\n\n.container .prefix {\n  order: 2;\n}\n")),Object(s.b)("p",null,"Now you can select the prefix using the sibling selector:"),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-css"}),".container input:focus + .prefix {\n  /* Focus styles... */\n}\n")),Object(s.b)("div",{className:"example"},Object(s.b)("div",{className:"container fixed"},Object(s.b)("input",{type:"text"}),Object(s.b)("div",{className:"prefix"},"https://"))),Object(s.b)("p",null,"In the case of an input, the simple solution is to use ",Object(s.b)("a",Object.assign({parentName:"p"},{href:"https://caniuse.com/#search=focus-within"}),Object(s.b)("inlineCode",{parentName:"a"},":focus-within")),", which has good browser support but is still experimental. Maybe you have other use cases for this trick though, ",Object(s.b)("a",Object.assign({parentName:"p"},{href:"https://twitter.com/pacocoursey"}),"let me know"),"!"),Object(s.b)("hr",null),Object(s.b)("p",null,"This post is inspired by my own work on inputs, and this paragraph:"),Object(s.b)("blockquote",null,Object(s.b)("p",{parentName:"blockquote"},"Unfortunately, trying to use ",Object(s.b)("inlineCode",{parentName:"p"},":focus")," limits what you can do: you can style the input or siblings that come after the input… but that’s it.\n— ",Object(s.b)("a",Object.assign({parentName:"p"},{href:"https://exogen.github.io/blog/focus-state"}),"Initializing focus state in React"))))}b.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-blog-css-previous-sibling-selector-mdx-59e8320150b1ac40cb3e.js.map
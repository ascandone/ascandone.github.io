{"version":3,"sources":["webpack:///./src/pages/blog/css-previous-sibling-selector.mdx"],"names":["metadata","title","description","date","tags","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","className","type","isMDXComponent"],"mappings":"sRAMaA,EAAW,CACtBC,MAAO,iEACPC,YAAa,iEACbC,KAAM,kBACNC,KAAM,CAAC,QAEIC,EAAe,GACtBC,EAAc,CAClBN,WACAK,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,yIAAwH,0BAAYC,WAAW,KAAvB,SAAxH,cACA,6OACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,qGAOL,mBAAKC,UAAU,WACjB,mBAAKA,UAAU,aACb,mBAAKA,UAAU,UAAf,YACA,qBAAOC,KAAK,WAGZ,qEAAoD,0BAAYF,WAAW,KAAvB,WAApD,gBAAwH,0BAAYA,WAAW,KAAvB,eAAxH,6GAA6R,kBAAIA,WAAW,KAAf,SAA7R,eACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,qGAOL,2EACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,sHAcL,kFACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,qEAML,mBAAKC,UAAU,WACjB,mBAAKA,UAAU,mBACb,qBAAOC,KAAK,SACZ,mBAAKD,UAAU,UAAf,cAGA,+EAA8D,+BAAGD,WAAW,KAAQ,CAChF,KAAQ,6CACP,0BAAYA,WAAW,KAAvB,kBAFL,qHAEwL,+BAAGA,WAAW,KAAQ,CAC1M,KAAQ,oCAD4K,eAFxL,KAKA,uBACA,4FACA,8BACE,iBAAGA,WAAW,cAAd,gCAA4D,0BAAYA,WAAW,KAAvB,UAA5D,6GACF,+BAAGA,WAAW,KAAQ,CAChB,KAAQ,8CADd,wCAQJJ,EAAWO,gBAAiB","file":"component---src-pages-blog-css-previous-sibling-selector-mdx-59e8320150b1ac40cb3e.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/alessandro/Documents/Dev/websites/projects/ascandone.github.io/src/components/blog-layout.tsx\";\nexport const metadata = {\n  title: 'CSS trick to style preceding elements using flexbox and order.',\n  description: 'CSS trick to style preceding elements using flexbox and order.',\n  date: 'August 19, 2019',\n  tags: ['css']\n};\nexport const _frontmatter = {};\nconst layoutProps = {\n  metadata,\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <p>{`There is no previous sibling selector in CSS. Instead, we can achieve the same behavior by using flexbox and the `}<inlineCode parentName=\"p\">{`order`}</inlineCode>{` property.`}</p>\n    <p>{`Let's say you're adding a prefix to an input, and would like to style the prefix when the input is focused. If you read from left to right and top to bottom (English), you likely structure your DOM like that too:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<div class=\"container\">\n  <div class=\"prefix\">https://</div>\n  <input type=\"text\" />\n</div>\n`}</code></pre>\n    <div className=\"example\">\n  <div className=\"container\">\n    <div className=\"prefix\">https://</div>\n    <input type=\"text\" />\n  </div>\n    </div>\n    <p>{`In this markup, there's no way to target the `}<inlineCode parentName=\"p\">{`.prefix`}</inlineCode>{` class using `}<inlineCode parentName=\"p\">{`input:focus`}</inlineCode>{`, because we have no preceding selector. Instead, we can rewrite the DOM structure so that prefix appears `}<em parentName=\"p\">{`after`}</em>{` the input:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<div class=\"container\">\n  <input type=\"text\" />\n  <div class=\"prefix\">https://</div>\n</div>\n`}</code></pre>\n    <p>{`And use flexbox to change the order of appearance:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`.container {\n  display: flex;\n}\n\n.container input {\n  order: 1;\n}\n\n.container .prefix {\n  order: 2;\n}\n`}</code></pre>\n    <p>{`Now you can select the prefix using the sibling selector:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`.container input:focus + .prefix {\n  /* Focus styles... */\n}\n`}</code></pre>\n    <div className=\"example\">\n  <div className=\"container fixed\">\n    <input type=\"text\" />\n    <div className=\"prefix\">https://</div>\n  </div>\n    </div>\n    <p>{`In the case of an input, the simple solution is to use `}<a parentName=\"p\" {...{\n        \"href\": \"https://caniuse.com/#search=focus-within\"\n      }}><inlineCode parentName=\"a\">{`:focus-within`}</inlineCode></a>{`, which has good browser support but is still experimental. Maybe you have other use cases for this trick though, `}<a parentName=\"p\" {...{\n        \"href\": \"https://twitter.com/pacocoursey\"\n      }}>{`let me know`}</a>{`!`}</p>\n    <hr></hr>\n    <p>{`This post is inspired by my own work on inputs, and this paragraph:`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Unfortunately, trying to use `}<inlineCode parentName=\"p\">{`:focus`}</inlineCode>{` limits what you can do: you can style the input or siblings that come after the input… but that’s it.\n— `}<a parentName=\"p\" {...{\n          \"href\": \"https://exogen.github.io/blog/focus-state\"\n        }}>{`Initializing focus state in React`}</a></p>\n    </blockquote>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}